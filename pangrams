pangram - a str that contains every alphabet from "a" to "z". this challenge wants user to determine whether it is a pangram in the English alphabet and 
return either "pangram" or "not pangram". an example of pangram is "a quick brown fox jumps over the lazy dog". 

my thought process (using the idea of counting sort):
1. get the length of char* s
2. scan through char* s to check for presence for all 26 alphabets
3. count the checked strings into an array
4. if count==26(no. of alphabet) then pangram, else, not pangram
5. if all present, then return pangram. else, then return not pangram.
quick note: a string of char* s may contain uppercase character and may contain non alphabets 

pseudocode: 

pangrams(s){
  len = strlen(s)
  for(i=0 to max){ //initialize count arr
    arr[i] = 0
  }
  for(i=0 to len){ //scanning through the array to check if a to z exist
    if(isupper(s[i]) == True) //converting scanned string to lowercase if it is upper case
      s[i] = tolower(s[i])
    else //char is already lowercase
      if(s[i]>='a' && s[i]<='z'){
        arr[s[i]]++ //store the count of each element  
      }
    
code (that doesnt work):

char* pangrams(char* s) {
    int i, total = 0, used[26]={0};
    for (i=0; i!='\0'; i++){

       
       if(s[i]>='A' && s[i]<='Z'){
            total=total+used[s[i]-'A'];
            used[s[i]-'A']=1;
        }
        if(s[i]>='a' && s[i]<='z'){
            total= total + used[s[i]-'a'];
            used[s[i]-'a']=1;
        }
    }
    if (total == 26){
        printf("pangram");
    }
    else{ 
        printf("not pangram");
    }       
    return 0;
}

however, output is stdout: (NULL)
